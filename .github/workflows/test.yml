name: 单元测试

on:
  workflow_dispatch:
  workflow_call:
    outputs:
      test_passed:
        description: "测试是否通过"
        value: ${{ jobs.test.outputs.passed }}

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    outputs:
      passed: ${{ steps.test_result.outputs.passed }}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
      
      - name: 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      
      - name: 运行测试
        id: test_result
        shell: bash
        run: |
          echo "开始运行测试..."
          
          # 创建测试报告目录
          mkdir -p test-reports
          
          # 列出所有包
          echo "📦 发现以下包："
          go list ./...
          
          # 逐个包进行测试
          echo "🔍 开始测试..."
          failed_pkgs=""
          
          for pkg in $(go list ./...); do
            echo "测试包: $pkg"
            pkg_name=$(basename $pkg)
            # 运行测试并生成覆盖率报告和测试输出
            if ! go test -timeout 300s -v -cover -coverprofile=test-reports/$pkg_name.coverage.out -json $pkg > test-reports/$pkg_name.json 2>&1; then
              echo "❌ $pkg 测试失败"
              failed_pkgs="$failed_pkgs\n$pkg"
            else
              # 生成HTML格式的覆盖率报告
              go tool cover -html=test-reports/$pkg_name.coverage.out -o test-reports/$pkg_name.coverage.html
              # 显示覆盖率报告
              echo "📊 覆盖率报告："
              go tool cover -func=test-reports/$pkg_name.coverage.out
              echo "✅ $pkg 测试通过"
            fi
          done
          
          # 如果有失败的包，输出汇总并退出
          if [ ! -z "$failed_pkgs" ]; then
            echo -e "\n❌ 以下包测试失败：$failed_pkgs"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "✅ 所有测试通过"
          echo "passed=true" >> $GITHUB_OUTPUT

      - name: 上传报告
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ matrix.os }}
          path: |
            test-reports/*.coverage.out
            test-reports/*.coverage.html
            test-reports/*.json
          retention-days: 14